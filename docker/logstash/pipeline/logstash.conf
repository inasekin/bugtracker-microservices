input {
  beats {
    port => 5044
  }
  tcp {
    port => 5000
    codec => json
  }
}

filter {
  # Определение источника логов по контейнеру
  if [container][name] {
    if [container][name] =~ /userservice/ {
      mutate {
        add_field => { 
          "[@metadata][target_index]" => "userservice-%{+YYYY.MM.dd}" 
          "service_name" => "userservice" 
        }
      }

      # Извлекаем сообщение из полей, в зависимости от того, откуда оно поступает
      if [message] {
        mutate {
          add_field => { "readable_message" => "%{message}" }
        }
      } else if [log] {
        mutate {
          add_field => { "readable_message" => "%{[log]}" }
          rename => { "[log]" => "message" }
        }
      }

      # Улучшенный grok паттерн для ASP.NET Core логов
      grok {
        match => { 
          "message" => "\[%{TIMESTAMP_ISO8601:log_timestamp} %{WORD:log_level}(?:\]|\s*\])\s*%{GREEDYDATA:log_message}"
        }
        tag_on_failure => ["_grokparsefailure"]
      }

      if "_grokparsefailure" not in [tags] {
        mutate {
          uppercase => [ "log_level" ]
        }
        
        date {
          match => ["log_timestamp", "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss.SSS", "HH:mm:ss"]
          target => "@timestamp"
        }
      }
    } else if [container][name] =~ /projectservice/ {
      mutate {
        add_field => { 
          "[@metadata][target_index]" => "projectservice-%{+YYYY.MM.dd}" 
          "service_name" => "projectservice" 
        }
      }
      
      # Сохраняем сообщение и для других сервисов
      if [message] {
        mutate {
          add_field => { "readable_message" => "%{message}" }
        }
      } else if [log] {
        mutate {
          add_field => { "readable_message" => "%{[log]}" }
          rename => { "[log]" => "message" }
        }
      }
    } else if [container][name] =~ /commentsservice/ {
      mutate {
        add_field => { 
          "[@metadata][target_index]" => "commentsservice-%{+YYYY.MM.dd}" 
          "service_name" => "commentsservice" 
        }
      }
      
      if [message] {
        mutate {
          add_field => { "readable_message" => "%{message}" }
        }
      } else if [log] {
        mutate {
          add_field => { "readable_message" => "%{[log]}" }
          rename => { "[log]" => "message" }
        }
      }
    } else if [container][name] =~ /gatewayservice/ {
      mutate {
        add_field => { 
          "[@metadata][target_index]" => "gatewayservice-%{+YYYY.MM.dd}" 
          "service_name" => "gatewayservice" 
        }
      }
      
      if [message] {
        mutate {
          add_field => { "readable_message" => "%{message}" }
        }
      } else if [log] {
        mutate {
          add_field => { "readable_message" => "%{[log]}" }
          rename => { "[log]" => "message" }
        }
      }
    } else {
      mutate {
        add_field => { 
          "[@metadata][target_index]" => "logstash-%{+YYYY.MM.dd}" 
          "service_name" => "other"
        }
      }
      
      if [message] {
        mutate {
          add_field => { "readable_message" => "%{message}" }
        }
      } else if [log] {
        mutate {
          add_field => { "readable_message" => "%{[log]}" }
          rename => { "[log]" => "message" }
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][target_index]}"
  }
  
  # Используем правильный индекс, если метаданные не установлены
  if ![@metadata][target_index] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "logstash-%{+YYYY.MM.dd}"
    }
  }
  
  stdout { codec => rubydebug }
}
