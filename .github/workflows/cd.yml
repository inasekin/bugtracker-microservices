name: CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository (without submodules)
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Initialize frontend submodule
        run: git submodule update --init --depth 1 frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GITHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Gateway
      - name: Build and push Gateway Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/Gateway
          file: ./src/Gateway/Dockerfile
          push: true
          tags: ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/gatewayservice:latest

      # User Service
      - name: Build and push UserService
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/Services/UserService/Dockerfile
          push: true
          tags: ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/userservice:latest

      # Project Service
      - name: Build and push ProjectService
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/Services/ProjectService/Dockerfile
          push: true
          tags: ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/projectservice:latest

      # Comments Service
      - name: Build and push CommentsService
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/Services/CommentsService/Dockerfile
          push: true
          tags: ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/commentsservice:latest

      # Frontend
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/frontend:latest

  deploy-to-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Create .ssh directory
        run: mkdir -p ~/.ssh && chmod 700 ~/.ssh

      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_IP_ADDRESS }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.VM_IP_ADDRESS }}
          if_key_exists: replace

      - name: Trigger Kubernetes Config Update
        run: |
          ssh -o StrictHostKeyChecking=no yc-user@${{ secrets.VM_IP_ADDRESS }} '
            cd ~/kubernetes-config-bugtracker &&
            git fetch origin main &&
            git reset --hard origin/main &&
            sudo kubectl apply -f manifests/ --recursive -n bugtracker
          '

      - name: Update Image Tags and Restart Deployments
        run: |
          ssh -o StrictHostKeyChecking=no yc-user@${{ secrets.VM_IP_ADDRESS }} '
            # Update image pull secrets to ensure we have the latest credentials
            kubectl delete secret github-registry -n bugtracker || true
            kubectl create secret docker-registry github-registry \
              --namespace bugtracker \
              --docker-server=ghcr.io \
              --docker-username=${{ secrets.USERNAME }} \
              --docker-password=${{ secrets.TOKEN }}

            # Force pull new images by restarting deployments
            sudo kubectl rollout restart deployment gateway-deployment -n bugtracker
            sudo kubectl rollout restart deployment user-service-deployment -n bugtracker
            sudo kubectl rollout restart deployment project-service-deployment -n bugtracker
            sudo kubectl rollout restart deployment comments-service-deployment -n bugtracker
            sudo kubectl rollout restart deployment frontend-deployment -n bugtracker

            # Wait for deployments to be ready
            kubectl rollout status deployment gateway-deployment -n bugtracker
            kubectl rollout status deployment user-service-deployment -n bugtracker
            kubectl rollout status deployment project-service-deployment -n bugtracker
            kubectl rollout status deployment comments-service-deployment -n bugtracker
            kubectl rollout status deployment frontend-deployment -n bugtracker
          '

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no yc-user@${{ secrets.VM_IP_ADDRESS }} '
            echo "=== Deployment Status ==="
            kubectl get pods -n bugtracker
            kubectl get services -n bugtracker
            kubectl get ingress -n bugtracker
          '
